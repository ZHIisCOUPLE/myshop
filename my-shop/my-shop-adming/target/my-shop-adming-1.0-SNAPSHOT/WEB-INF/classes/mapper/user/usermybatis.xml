<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace  写的是Dao这个interface接口-->
<mapper namespace="com.xm.shop.dao.UserDao">


    <!--抽取sql共同的部分-->
    <sql id="userColumn">
        a.id as "id",
        a.username as "userName",
        a.email as "email",
        a.phone as "phone",
        a.created as "created",
        a.updated as "updated"

    </sql>

    <!--
        mybatis 写参数格式是 #{}
    -->
    <!--
    查询：
    1.使用select 标签
    2. id应该对应dao的方法名
    3. resultType 对应你要映射的实体类
    4. 在标签内部写SQL
    5. 参数应该使用#{}格式
    6. <include refid="userColumn"/>    ===================》引用抽取部分
    -->
    <select id="getByEmailAndPassword" resultType="com.xm.shop.entity.User">
        select <include refid="userColumn" />
        from tb_user a where a.email=#{email} and a.password=#{password}
    </select>

    <select id="getByid" resultType="com.xm.shop.entity.User">
        select
        <include refid="userColumn"></include>
        from tb_user a
        where a.id=#{id}
    </select>

    <update id="update">
        update tb_user set username=#{userName},email=#{email},phone=#{phone},updated=#{updated}  where id=#{id}
    </update>

    <delete id="delete">
        delete from tb_user where id=#{id}
    </delete>


    <select id="findList" resultType="com.xm.shop.entity.User">
        select
        <include refid="userColumn"></include>
        from tb_user a
        where 1=1
        <if test="email!=null and email!=''">
            and a.email like concat('%',#{email},'%')
        </if>
        <if test="phone!=null and phone !=''">
            and a.phone like concat('%',#{phone},'%')
        </if>
        <if test="userName!=null and userName!=''">
            and a.username like concat('%',#{userName},'%')
        </if>
        <if test="page!=null">
            limit #{page.start},#{page.pageSize}
        </if>
    </select>

    <select id="findListCount" resultType="java.lang.Long">
        select count(*) from tb_user a
        where 1=1
        <if test="email!=null and email!='' ">and a.email like concat('%',#{email},'%')</if>
        <if test="phone!=null and phone!=''">and a.phone like concat('%',#{phone},'%')</if>
        <if test="userName!=null and userName!=''">and a.username like concat('%',#{userName},'%')</if>
    </select>

    <insert id="save">
        insert into tb_user (username,password,phone,email,created,updated)
        values (#{userName},#{password},#{phone},#{email},#{created},#{updated})
    </insert>

    <delete id="deleteMutil">
        delete from tb_user where id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>

    </delete>
    <!--<select id="queryById" resultType="com.qf.login.entity.User">-->
        <!--select-->
        <!--<include refid="userColumn"/>-->
        <!--from tb_user-->
        <!--where id=#{id}-->
    <!--</select>-->

    <!--<select id="queryByUserNameAndPassword" resultType="com.qf.login.entity.User">-->
        <!--select-->
        <!--<include refid="userColumn"/>-->
        <!--from tb_user-->
        <!--where username=#{userName} and password=#{password}-->
    <!--</select>-->

    <!--<select id="query" resultType="com.qf.login.entity.User">-->
        <!--select-->
        <!--<include refid="userColumn"/>-->
        <!--from tb_user-->
        <!--where username=#{userName} and password=#{password}-->
    <!--</select>-->

    <!--&lt;!&ndash;insert&ndash;&gt;-->
    <!--<insert id="insert" >-->
        <!--insert into tb_user (username,password,phone,email,created,updated) values (#{userName},#{password},#{phone},#{email},#{created},#{updated})-->
    <!--</insert>-->


    <!--&lt;!&ndash;删除&ndash;&gt;-->
    <!--<delete id="delete">-->
        <!--delete from tb_user where id=#{id}-->
    <!--</delete>-->

    <!--&lt;!&ndash;修改&ndash;&gt;-->
    <!--<update id="update">-->
        <!--update tb_user set phone=#{phone} where id=#{id}-->
    <!--</update>-->



</mapper>